/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// @ts-nocheck

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';
import { AuthorizedApiBase, IConfig } from "./iconfig";

export class AquariumClient extends AuthorizedApiBase {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(configuration: IConfig, baseUrl?: string, instance?: AxiosInstance) {

    super(configuration);

    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7244";

  }

  get(id: string | null, cancelToken?: CancelToken | undefined): Promise<Aquarium> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGet(_response);
    });
  }

  protected processGet(response: AxiosResponse): Promise<Aquarium> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Aquarium.fromJS(resultData200);
      return Promise.resolve<Aquarium>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Aquarium>(null as any);
  }

  edit(id: string | null, aquarium: Aquarium, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfAquarium> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(aquarium);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PATCH",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processEdit(_response);
    });
  }

  protected processEdit(response: AxiosResponse): Promise<ItemResponseModelOfAquarium> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfAquarium.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfAquarium>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfAquarium>(null as any);
  }

  create(aquarium: Aquarium, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfAquarium> {
    let url_ = this.baseUrl + "/api/Aquarium";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(aquarium);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: AxiosResponse): Promise<ItemResponseModelOfAquarium> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfAquarium.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfAquarium>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfAquarium>(null as any);
  }

  coralPOST(id: string | null, coral: Coral, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfCoral> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Coral";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(coral);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processCoralPOST(_response);
    });
  }

  protected processCoralPOST(response: AxiosResponse): Promise<ItemResponseModelOfCoral> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfCoral.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfCoral>(result200);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfCoral>(null as any);
  }

  coralPUT(id: string | null, coralID: string | null, coral: Coral, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfCoral> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Coral/{CoralID}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (coralID === undefined || coralID === null)
      throw new Error("The parameter 'coralID' must be defined.");
    url_ = url_.replace("{CoralID}", encodeURIComponent("" + coralID));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(coral);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processCoralPUT(_response);
    });
  }

  protected processCoralPUT(response: AxiosResponse): Promise<ItemResponseModelOfCoral> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfCoral.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfCoral>(result200);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfCoral>(null as any);
  }

  animalPOST(id: string | null, animal: Animal, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfAnimal> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Animal";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(animal);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processAnimalPOST(_response);
    });
  }

  protected processAnimalPOST(response: AxiosResponse): Promise<ItemResponseModelOfAnimal> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfAnimal.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfAnimal>(result200);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfAnimal>(null as any);
  }

  animalPUT(id: string | null, animalID: string | null, animal: Animal, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfAnimal> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Animal/{AnimalID}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (animalID === undefined || animalID === null)
      throw new Error("The parameter 'animalID' must be defined.");
    url_ = url_.replace("{AnimalID}", encodeURIComponent("" + animalID));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(animal);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processAnimalPUT(_response);
    });
  }

  protected processAnimalPUT(response: AxiosResponse): Promise<ItemResponseModelOfAnimal> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfAnimal.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfAnimal>(result200);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfAnimal>(null as any);
  }

  forUser(cancelToken?: CancelToken | undefined): Promise<AquariumUserResponse[]> {
    let url_ = this.baseUrl + "/api/Aquarium/ForUser";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processForUser(_response);
    });
  }

  protected processForUser(response: AxiosResponse): Promise<AquariumUserResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(AquariumUserResponse.fromJS(item));
      }
      else {
        result200 = <any>null;
      }
      return Promise.resolve<AquariumUserResponse[]>(result200);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<AquariumUserResponse[]>(null as any);
  }

  picturePOST(id: string | null, description: string | null | undefined, formFile: FileParameter | null | undefined, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfPictureResponse> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Picture";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = new FormData();
    if (description !== null && description !== undefined)
      content_.append("Description", description.toString());
    if (formFile !== null && formFile !== undefined)
      content_.append("FormFile", formFile.data, formFile.fileName ? formFile.fileName : "FormFile");

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processPicturePOST(_response);
    });
  }

  protected processPicturePOST(response: AxiosResponse): Promise<ItemResponseModelOfPictureResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfPictureResponse.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfPictureResponse>(result200);

    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfPictureResponse>(null as any);
  }

  pictureDELETE(id: string | null, pictureID: string | null, cancelToken?: CancelToken | undefined): Promise<ItemResultModel> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Picture/{PictureID}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (pictureID === undefined || pictureID === null)
      throw new Error("The parameter 'pictureID' must be defined.");
    url_ = url_.replace("{PictureID}", encodeURIComponent("" + pictureID));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processPictureDELETE(_response);
    });
  }

  protected processPictureDELETE(response: AxiosResponse): Promise<ItemResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResultModel.fromJS(resultData200);
      return Promise.resolve<ItemResultModel>(result200);

    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResultModel>(null as any);
  }

  getPicture(id: string | null, pictureID: string | null, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfPictureResponse> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Picture/{PictureID}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (pictureID === undefined || pictureID === null)
      throw new Error("The parameter 'pictureID' must be defined.");
    url_ = url_.replace("{PictureID}", encodeURIComponent("" + pictureID));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGetPicture(_response);
    });
  }

  protected processGetPicture(response: AxiosResponse): Promise<ItemResponseModelOfPictureResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfPictureResponse.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfPictureResponse>(result200);

    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException("A server side error occurred.", status, _responseText, _headers, result400);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfPictureResponse>(null as any);
  }

  pictureAll(id: string | null, cancelToken?: CancelToken | undefined): Promise<PictureResponse[]> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Pictures";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processPictureAll(_response);
    });
  }

  protected processPictureAll(response: AxiosResponse): Promise<PictureResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(PictureResponse.fromJS(item));
      }
      else {
        result200 = <any>null;
      }
      return Promise.resolve<PictureResponse[]>(result200);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<PictureResponse[]>(null as any);
  }

  getCorals(id: string | null, cancelToken?: CancelToken | undefined): Promise<Coral[]> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Corals";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGetCorals(_response);
    });
  }

  protected processGetCorals(response: AxiosResponse): Promise<Coral[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Coral.fromJS(item));
      }
      else {
        result200 = <any>null;
      }
      return Promise.resolve<Coral[]>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Coral[]>(null as any);
  }

  getAnimals(id: string | null, cancelToken?: CancelToken | undefined): Promise<Animal[]> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Animals";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGetAnimals(_response);
    });
  }

  protected processGetAnimals(response: AxiosResponse): Promise<Animal[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Animal.fromJS(item));
      }
      else {
        result200 = <any>null;
      }
      return Promise.resolve<Animal[]>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Animal[]>(null as any);
  }

  getCoral(id: string | null, coralId: string | null, cancelToken?: CancelToken | undefined): Promise<Coral> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Coral/{CoralId}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (coralId === undefined || coralId === null)
      throw new Error("The parameter 'coralId' must be defined.");
    url_ = url_.replace("{CoralId}", encodeURIComponent("" + coralId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGetCoral(_response);
    });
  }

  protected processGetCoral(response: AxiosResponse): Promise<Coral> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Coral.fromJS(resultData200);
      return Promise.resolve<Coral>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Coral>(null as any);
  }

  getAnimal(id: string | null, animalId: string | null, cancelToken?: CancelToken | undefined): Promise<Animal> {
    let url_ = this.baseUrl + "/api/Aquarium/{id}/Animal/{AnimalId}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (animalId === undefined || animalId === null)
      throw new Error("The parameter 'animalId' must be defined.");
    url_ = url_.replace("{AnimalId}", encodeURIComponent("" + animalId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGetAnimal(_response);
    });
  }

  protected processGetAnimal(response: AxiosResponse): Promise<Animal> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Animal.fromJS(resultData200);
      return Promise.resolve<Animal>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Animal>(null as any);
  }

  getAll(cancelToken?: CancelToken | undefined): Promise<Aquarium[]> {
    let url_ = this.baseUrl + "/api/Aquarium/All";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGetAll(_response);
    });
  }

  protected processGetAll(response: AxiosResponse): Promise<Aquarium[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Aquarium.fromJS(item));
      }
      else {
        result200 = <any>null;
      }
      return Promise.resolve<Aquarium[]>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Aquarium[]>(null as any);
  }
}

export class UserClient extends AuthorizedApiBase {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(configuration: IConfig, baseUrl?: string, instance?: AxiosInstance) {

    super(configuration);

    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7244";

  }

  login(cred: LoginRequest, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfUserResponse> {
    let url_ = this.baseUrl + "/api/User/Login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(cred);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processLogin(_response);
    });
  }

  protected processLogin(response: AxiosResponse): Promise<ItemResponseModelOfUserResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfUserResponse.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfUserResponse>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<ItemResponseModelOfUserResponse>(null as any);
  }

  register(cred: User, cancelToken?: CancelToken | undefined): Promise<ItemResponseModelOfUserResponse> {
    let url_ = this.baseUrl + "/api/User/Register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(cred);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processRegister(_response);
    });
  }

  protected processRegister(response: AxiosResponse): Promise<ItemResponseModelOfUserResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ItemResponseModelOfUserResponse.fromJS(resultData200);
      return Promise.resolve<ItemResponseModelOfUserResponse>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<User>(null as any);
  }

  updateUser(id: string | null, cred: User, cancelToken?: CancelToken | undefined): Promise<User> {
    let url_ = this.baseUrl + "/api/User/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(cred);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PATCH",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processUpdateUser(_response);
    });
  }

  protected processUpdateUser(response: AxiosResponse): Promise<User> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = User.fromJS(resultData200);
      return Promise.resolve<User>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<User>(null as any);
  }

  get(id: string | null, cancelToken?: CancelToken | undefined): Promise<User> {
    let url_ = this.baseUrl + "/api/User/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGet(_response);
    });
  }

  protected processGet(response: AxiosResponse): Promise<User> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = User.fromJS(resultData200);
      return Promise.resolve<User>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<User>(null as any);
  }

  getAll(cancelToken?: CancelToken | undefined): Promise<User[]> {
    let url_ = this.baseUrl + "/api/User/All";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        "Accept": "application/json"
      },
      cancelToken
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.instance.request(transformedOptions_);
    }).catch((_error: any) => {
      if (isAxiosError(_error) && _error.response) {
        return _error.response;
      } else {
        throw _error;
      }
    }).then((_response: AxiosResponse) => {
      return this.processGetAll(_response);
    });
  }

  protected processGetAll(response: AxiosResponse): Promise<User[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(User.fromJS(item));
      }
      else {
        result200 = <any>null;
      }
      return Promise.resolve<User[]>(result200);

    } else if (status === 401) {
      const _responseText = response.data;
      let result401: any = null;
      let resultData401 = _responseText;
      result401 = ProblemDetails.fromJS(resultData401);
      return throwException("A server side error occurred.", status, _responseText, _headers, result401);

    } else if (status === 404) {
      const _responseText = response.data;
      let result404: any = null;
      let resultData404 = _responseText;
      result404 = ProblemDetails.fromJS(resultData404);
      return throwException("A server side error occurred.", status, _responseText, _headers, result404);

    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<User[]>(null as any);
  }
}

export abstract class Entity implements IEntity {
  id?: string;

  constructor(data?: IEntity) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): Entity {
    data = typeof data === 'object' ? data : {};
    throw new Error("The abstract class 'Entity' cannot be instantiated.");
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    return data;
  }
}

export interface IEntity {
  id?: string;
}

export class Aquarium extends Entity implements IAquarium {
  name?: string;
  waterType?: WaterType;
  depth?: number;
  height?: number;
  length?: number;
  liters?: number;

  constructor(data?: IAquarium) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["name"];
      this.waterType = _data["waterType"];
      this.depth = _data["depth"];
      this.height = _data["height"];
      this.length = _data["length"];
      this.liters = _data["liters"];
    }
  }

  static fromJS(data: any): Aquarium {
    data = typeof data === 'object' ? data : {};
    let result = new Aquarium();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["waterType"] = this.waterType;
    data["depth"] = this.depth;
    data["height"] = this.height;
    data["length"] = this.length;
    data["liters"] = this.liters;
    super.toJSON(data);
    return data;
  }
}

export interface IAquarium extends IEntity {
  name?: string;
  waterType?: WaterType;
  depth?: number;
  height?: number;
  length?: number;
  liters?: number;
}

export enum WaterType {
  Saltwater = "Saltwater",
  Freshwater = "Freshwater",
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; };

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
      if (_data["extensions"]) {
        this.extensions = {} as any;
        for (let key in _data["extensions"]) {
          if (_data["extensions"].hasOwnProperty(key))
            (<any>this.extensions)![key] = _data["extensions"][key];
        }
      }
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    if (this.extensions) {
      data["extensions"] = {};
      for (let key in this.extensions) {
        if (this.extensions.hasOwnProperty(key))
          (<any>data["extensions"])[key] = this.extensions[key];
      }
    }
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; };
}

export class ResponseModel implements IResponseModel {
  hasError?: boolean;
  errorMessages?: { [key: string]: string; };
  warningMessages?: { [key: string]: string; };
  hasWarning?: boolean;

  constructor(data?: IResponseModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.hasError = _data["hasError"];
      if (_data["errorMessages"]) {
        this.errorMessages = {} as any;
        for (let key in _data["errorMessages"]) {
          if (_data["errorMessages"].hasOwnProperty(key))
            (<any>this.errorMessages)![key] = _data["errorMessages"][key];
        }
      }
      if (_data["warningMessages"]) {
        this.warningMessages = {} as any;
        for (let key in _data["warningMessages"]) {
          if (_data["warningMessages"].hasOwnProperty(key))
            (<any>this.warningMessages)![key] = _data["warningMessages"][key];
        }
      }
      this.hasWarning = _data["hasWarning"];
    }
  }

  static fromJS(data: any): ResponseModel {
    data = typeof data === 'object' ? data : {};
    let result = new ResponseModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["hasError"] = this.hasError;
    if (this.errorMessages) {
      data["errorMessages"] = {};
      for (let key in this.errorMessages) {
        if (this.errorMessages.hasOwnProperty(key))
          (<any>data["errorMessages"])[key] = this.errorMessages[key];
      }
    }
    if (this.warningMessages) {
      data["warningMessages"] = {};
      for (let key in this.warningMessages) {
        if (this.warningMessages.hasOwnProperty(key))
          (<any>data["warningMessages"])[key] = this.warningMessages[key];
      }
    }
    data["hasWarning"] = this.hasWarning;
    return data;
  }
}

export interface IResponseModel {
  hasError?: boolean;
  errorMessages?: { [key: string]: string; };
  warningMessages?: { [key: string]: string; };
  hasWarning?: boolean;
}

export class ItemResponseModelOfAquarium extends ResponseModel implements IItemResponseModelOfAquarium {
  data?: Aquarium;

  constructor(data?: IItemResponseModelOfAquarium) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.data = _data["data"] ? Aquarium.fromJS(_data["data"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ItemResponseModelOfAquarium {
    data = typeof data === 'object' ? data : {};
    let result = new ItemResponseModelOfAquarium();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IItemResponseModelOfAquarium extends IResponseModel {
  data?: Aquarium;
}

export class ItemResponseModelOfCoral extends ResponseModel implements IItemResponseModelOfCoral {
  data?: Coral;

  constructor(data?: IItemResponseModelOfCoral) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.data = _data["data"] ? Coral.fromJS(_data["data"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ItemResponseModelOfCoral {
    data = typeof data === 'object' ? data : {};
    let result = new ItemResponseModelOfCoral();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IItemResponseModelOfCoral extends IResponseModel {
  data?: Coral;
}

export class AquariumItem extends Entity implements IAquariumItem {
  aquarium!: string;
  name!: string;
  species!: string;
  inserted?: string;
  amount!: number;
  description?: string;

  constructor(data?: IAquariumItem) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.aquarium = _data["aquarium"];
      this.name = _data["name"];
      this.species = _data["species"];
      this.inserted = _data["inserted"];
      this.amount = _data["amount"];
      this.description = _data["description"];
    }
  }

  static fromJS(data: any): AquariumItem {
    data = typeof data === 'object' ? data : {};
    let result = new AquariumItem();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["aquarium"] = this.aquarium;
    data["name"] = this.name;
    data["species"] = this.species;
    data["inserted"] = this.inserted;
    data["amount"] = this.amount;
    data["description"] = this.description;
    super.toJSON(data);
    return data;
  }
}

export interface IAquariumItem extends IEntity {
  aquarium: string;
  name: string;
  species: string;
  inserted?: string;
  amount: number;
  description?: string;
}

export class Coral extends AquariumItem implements ICoral {
  coralType?: CoralType;

  constructor(data?: ICoral) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.coralType = _data["coralType"];
    }
  }

  static fromJS(data: any): Coral {
    data = typeof data === 'object' ? data : {};
    let result = new Coral();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["coralType"] = this.coralType;
    super.toJSON(data);
    return data;
  }
}

export interface ICoral extends IAquariumItem {
  coralType?: CoralType;
}

export enum CoralType {
  SoftCoral = "SoftCoral",
  HardCoral = "HardCoral",
}

export class Animal extends AquariumItem implements IAnimal {
  deathDate?: string;
  isAlive?: boolean;

  constructor(data?: IAnimal) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.deathDate = _data["deathDate"];
      this.isAlive = _data["isAlive"];
    }
  }

  static fromJS(data: any): Animal {
    data = typeof data === 'object' ? data : {};
    let result = new Animal();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["deathDate"] = this.deathDate;
    data["isAlive"] = this.isAlive;
    super.toJSON(data);
    return data;
  }
}

export interface IAnimal extends IAquariumItem {
  deathDate?: string;
  isAlive?: boolean;
}

export class ItemResponseModelOfAnimal extends ResponseModel implements IItemResponseModelOfAnimal {
  data?: Animal;

  constructor(data?: IItemResponseModelOfAnimal) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.data = _data["data"] ? Animal.fromJS(_data["data"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ItemResponseModelOfAnimal {
    data = typeof data === 'object' ? data : {};
    let result = new ItemResponseModelOfAnimal();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IItemResponseModelOfAnimal extends IResponseModel {
  data?: Animal;
}

export class AquariumUserResponse implements IAquariumUserResponse {
  aquarium?: Aquarium;
  role?: UserRole;

  constructor(data?: IAquariumUserResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.aquarium = _data["aquarium"] ? Aquarium.fromJS(_data["aquarium"]) : <any>undefined;
      this.role = _data["role"];
    }
  }

  static fromJS(data: any): AquariumUserResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AquariumUserResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["aquarium"] = this.aquarium ? this.aquarium.toJSON() : <any>undefined;
    data["role"] = this.role;
    return data;
  }
}

export interface IAquariumUserResponse {
  aquarium?: Aquarium;
  role?: UserRole;
}

export enum UserRole {
  Admin = "Admin",
  User = "User",
}

export class ItemResponseModelOfPictureResponse extends ResponseModel implements IItemResponseModelOfPictureResponse {
  data?: PictureResponse;

  constructor(data?: IItemResponseModelOfPictureResponse) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.data = _data["data"] ? PictureResponse.fromJS(_data["data"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ItemResponseModelOfPictureResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ItemResponseModelOfPictureResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IItemResponseModelOfPictureResponse extends IResponseModel {
  data?: PictureResponse;
}

export class PictureResponse implements IPictureResponse {
  bytes?: string;
  base64?: string;
  picture?: Picture;

  constructor(data?: IPictureResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.bytes = _data["bytes"];
      this.base64 = _data["base64"];
      this.picture = _data["picture"] ? Picture.fromJS(_data["picture"]) : <any>undefined;
    }
  }

  static fromJS(data: any): PictureResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PictureResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["bytes"] = this.bytes;
    data["base64"] = this.base64;
    data["picture"] = this.picture ? this.picture.toJSON() : <any>undefined;
    return data;
  }
}

export interface IPictureResponse {
  bytes?: string;
  base64?: string;
  picture?: Picture;
}

export class Picture extends Entity implements IPicture {
  uploaded?: string;
  aquarium?: string;
  description?: string;
  contentType?: string;
  pictureID?: string;

  constructor(data?: IPicture) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.uploaded = _data["uploaded"];
      this.aquarium = _data["aquarium"];
      this.description = _data["description"];
      this.contentType = _data["contentType"];
      this.pictureID = _data["pictureID"];
    }
  }

  static fromJS(data: any): Picture {
    data = typeof data === 'object' ? data : {};
    let result = new Picture();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["uploaded"] = this.uploaded;
    data["aquarium"] = this.aquarium;
    data["description"] = this.description;
    data["contentType"] = this.contentType;
    data["pictureID"] = this.pictureID;
    super.toJSON(data);
    return data;
  }
}

export interface IPicture extends IEntity {
  uploaded?: string;
  aquarium?: string;
  description?: string;
  contentType?: string;
  pictureID?: string;
}

export class ItemResultModel extends ResponseModel implements IItemResultModel {
  success?: boolean;

  constructor(data?: IItemResultModel) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.success = _data["success"];
    }
  }

  static fromJS(data: any): ItemResultModel {
    data = typeof data === 'object' ? data : {};
    let result = new ItemResultModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["success"] = this.success;
    super.toJSON(data);
    return data;
  }
}

export interface IItemResultModel extends IResponseModel {
  success?: boolean;
}

export class ItemResponseModelOfUserResponse extends ResponseModel implements IItemResponseModelOfUserResponse {
  data?: UserResponse;

  constructor(data?: IItemResponseModelOfUserResponse) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.data = _data["data"] ? UserResponse.fromJS(_data["data"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ItemResponseModelOfUserResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ItemResponseModelOfUserResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IItemResponseModelOfUserResponse extends IResponseModel {
  data?: UserResponse;
}

export class UserResponse implements IUserResponse {
  user?: User;
  authenticationInformation?: AuthenticationInformation;

  constructor(data?: IUserResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
      this.authenticationInformation = _data["authenticationInformation"] ? AuthenticationInformation.fromJS(_data["authenticationInformation"]) : <any>undefined;
    }
  }

  static fromJS(data: any): UserResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["user"] = this.user ? this.user.toJSON() : <any>undefined;
    data["authenticationInformation"] = this.authenticationInformation ? this.authenticationInformation.toJSON() : <any>undefined;
    return data;
  }
}

export interface IUserResponse {
  user?: User;
  authenticationInformation?: AuthenticationInformation;
}

export class User extends Entity implements IUser {
  email?: string;
  firstname?: string;
  lastname?: string;
  fullName?: string;
  password?: string;
  active?: boolean;

  constructor(data?: IUser) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.email = _data["email"];
      this.firstname = _data["firstname"];
      this.lastname = _data["lastname"];
      this.fullName = _data["fullName"];
      this.password = _data["password"];
      this.active = _data["active"];
    }
  }

  static fromJS(data: any): User {
    data = typeof data === 'object' ? data : {};
    let result = new User();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["email"] = this.email;
    data["firstname"] = this.firstname;
    data["lastname"] = this.lastname;
    data["fullName"] = this.fullName;
    data["password"] = this.password;
    data["active"] = this.active;
    super.toJSON(data);
    return data;
  }
}

export interface IUser extends IEntity {
  email?: string;
  firstname?: string;
  lastname?: string;
  fullName?: string;
  password?: string;
  active?: boolean;
}

export class AuthenticationInformation implements IAuthenticationInformation {
  token?: string;
  expirationDate?: number;

  constructor(data?: IAuthenticationInformation) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"];
      this.expirationDate = _data["expirationDate"];
    }
  }

  static fromJS(data: any): AuthenticationInformation {
    data = typeof data === 'object' ? data : {};
    let result = new AuthenticationInformation();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["token"] = this.token;
    data["expirationDate"] = this.expirationDate;
    return data;
  }
}

export interface IAuthenticationInformation {
  token?: string;
  expirationDate?: number;
}

export class LoginRequest implements ILoginRequest {
  username?: string;
  password?: string;

  constructor(data?: ILoginRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): LoginRequest {
    data = typeof data === 'object' ? data : {};
    let result = new LoginRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["password"] = this.password;
    return data;
  }
}

export interface ILoginRequest {
  username?: string;
  password?: string;
}

export interface IRegisterRequest {
  username?: string;
  password?: string;
  email?: string;
  firstname?: string;
  lastname?: string;
}

export class RegisterRequest implements IRegisterRequest {
  username?: string;
  password?: string;
  email?: string;
  firstname?: string;
  lastname?: string;
  active = true

  constructor(data?: IRegisterRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.password = _data["password"];
      this.email = _data["email"];
      this.firstname = _data["firstname"];
      this.lastname = _data["lastname"];
      this.active = true;
    }
  }

  static fromJS(data: any): RegisterRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["password"] = this.password;
    data["email"] = this.email;
    data["firstname"] = this.firstname;
    data["lastname"] = this.lastname;
    data["active"] = this.active;
    return data;
  }
}

export interface FileParameter {
  data: any;
  fileName: string;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}

