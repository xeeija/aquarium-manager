version: '3.4'

services:
  mongo:
    container_name: mongo-dev
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_DATABASE=auth
      - MONGO_INITDB_ROOT_PASSWORD=pass
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.2
    ports:
      - '27017:27017'
    volumes:
      - ./MongoData:/data/db
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    depends_on:
      - mongo
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.3
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-dev
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=pass
    ports:
      - '8081:8081'
    volumes:
      - ./MongoData:/data/db
  influxdb:
    image: influxdb:latest
    volumes:
      # Mount for influxdb data directory and configuration
      - ./InfluxData:/var/lib/influxdb2:rw
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.4
    ports:
      - "8086:8086"
  datasimulation:
    image: thomasschirgi/datasimulation:latest
    container_name: datasimulation2023
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.5
    ports:
      - "4999:80"
      - "502:502"
      - "1883:1883"
    volumes:
      - "./SimulationSettings:/app/SimulationSettings"
  aquariummanagement:
    container_name: aquarium_api
    image: thomasschirgi/aquariummanagementapi:latest
    volumes:
      # Mount for influxdb data directory and configuration
      - "./Settings:/app/Settings"
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.6
    ports:
      - "5000:5000"
  aquariumdataapi:
    container_name: aquariumdataapi
    image: thomasschirgi/aquariumdataapi:latest
    volumes:
      # Mount for influxdb data directory and configuration
      - "./DataSettings:/app/DataSettings"
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.7
    ports:
      - "5001:5001"
  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.0-alpine
    volumes:
      - ./dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
      - "9000:9000"
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.8

  apisix:
    image: apache/apisix:${APISIX_IMAGE_TAG:-3.1.0-debian}
    volumes:
      - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ##network_mode: host
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9092:9092/tcp"
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.9

  etcd:
    image: bitnami/etcd:3.4.15
    volumes:
      - etcd_data:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.10

  web1:
    image: nginx:1.19.0-alpine
    volumes:
      - ./upstream/web1.conf:/etc/nginx/nginx.conf
    ports:
      - "9081:80/tcp"
    environment:
      - NGINX_PORT=80
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.11

  web2:
    image: nginx:1.19.0-alpine
    volumes:
      - ./upstream/web2.conf:/etc/nginx/nginx.conf
    ports:
      - "9082:80/tcp"
    environment:
      - NGINX_PORT=80
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.12

  prometheus:
    image: prom/prometheus:v2.25.0
    volumes:
      - ./prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      mongo-compose-network:
        ipv4_address: 10.5.0.13
networks:
  mongo-compose-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1

volumes:
  etcd_data:
    driver: local
